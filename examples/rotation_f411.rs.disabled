//! Draw a square, circle and triangle on the screen using the embedded_graphics library over a 4
//! wire SPI interface.
//!
//! This example is for the STM32F411 Nucleo development board.
//!
//! Wiring connections are as follows
//!
//! ```
//! GND -> GND
//! 3V3 -> VCC
//! PA5 -> SCL
//! PA7 -> SDA
//! PB0 -> RST
//! PB1 -> D/C
//! ```
//!
//! Run it with `cargo run --example graphics`.

#![no_std]
#![no_main]

use cortex_m_rt::ExceptionFrame;
use cortex_m_rt::{entry, exception};
use embedded_graphics::{
    fonts::Font6x8,
    geometry::Point,
    image::ImageBmp,
    pixelcolor::{BinaryColor, Rgb565},
    prelude::*,
    primitives::{Circle, Line, Rectangle},
    text_6x8,
};
use panic_semihosting as _;
use ssd1331::{DisplayRotation::Rotate0, Ssd1331};
use stm32f4xx_hal::delay::Delay;
use stm32f4xx_hal::prelude::*;
use stm32f4xx_hal::spi::{Mode, NoMiso, Phase, Polarity, Spi};
use stm32f4xx_hal::stm32;

#[entry]
fn main() -> ! {
    let cp = cortex_m::Peripherals::take().unwrap();
    let dp = stm32::Peripherals::take().unwrap();

    // Set up the system clock to 48MHz
    let rcc = dp.RCC.constrain();
    let clocks = rcc.cfgr.sysclk(48.mhz()).freeze();

    let mut gpiob = dp.GPIOB.split();

    // SPI1
    let sck = gpiob.pb3.into_alternate_af5();
    let mosi = gpiob.pb5.into_alternate_af5();

    let mut delay = Delay::new(cp.SYST, clocks);

    let mut rst = gpiob.pb10.into_push_pull_output();
    let mut dc = gpiob.pb6.into_push_pull_output();

    let spi = Spi::spi1(
        dp.SPI1,
        (sck, NoMiso, mosi),
        Mode {
            polarity: Polarity::IdleLow,
            phase: Phase::CaptureOnFirstTransition,
        },
        1.mhz().into(),
        clocks,
    );

    let mut disp = Ssd1331::new(spi, dc, Rotate0);

    disp.reset(&mut rst, &mut delay).unwrap();
    disp.init().unwrap();
    disp.flush().unwrap();

    // Red with a small amount of green creates a deep orange colour
    let rust = Rgb565::new(0xff, 0x07, 0x00);

    disp.draw(
        Font6x8::render_str("Hello world!")
            .stroke(Some(Rgb565::WHITE))
            .into_iter(),
    );
    disp.draw(
        Font6x8::render_str("Hello Rust!")
            .stroke(Some(rust))
            .translate(Point::new(0, 16))
            .into_iter(),
    );

    // Macros can also be used
    disp.draw(
        text_6x8!(
            "Hello macros!",
            stroke = Some(Rgb565::RED),
            fill = Some(Rgb565::GREEN)
        )
        .translate(Point::new(0, 24)),
    );

    disp.flush().unwrap();

    loop {}
}
